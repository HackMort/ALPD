---
type Props = {
    type: string;
};

import data from "./data.js";

const { type } = Astro.props;
---

<section class="skeleton skeleton--mobile">
    {
        data
            .filter((section) => section.type == type)
            .map((section, index) => (
                <div
                    class={`skeleton__content ${
                        section.active ? " skeleton__content--active" : ""
                    } skeleton__content--mobile-${section.type}`}
                >
                    <article class="skeleton__container">
                        <div class="skeleton__header">
                            <div
                                class="skeleton__header--title"
                                set:html={section.title}
                            >
                                <img
                                    class="skeleton__header--icon"
                                    src={section.icon}
                                    alt={section.title}
                                />
                            </div>
                            <div class="skeleton__header--arrows">
                                <div class="skeleton__header--arrow">
                                    <img
                                        class="skeleton__header--arrow-left"
                                        src="/assets/images/hpp-profile/skeleton/arrow-left.svg"
                                        alt="Arrow left"
                                    />
                                </div>
                                <div class="skeleton__header--arrow">
                                    <img
                                        class="skeleton__header--arrow-right"
                                        src="/assets/images/hpp-profile/skeleton/arrow-right.svg"
                                        alt="Arrow right"
                                    />
                                </div>
                            </div>
                        </div>
                        <div class="skeleton__content--body">
                            <p
                                class="skeleton__content--text"
                                set:html={section.text}
                            />
                            <div class="skeleton__content--img">
                                <img
                                    src={section.image1}
                                    alt={section.imageAlt1}
                                    class={section.imageClasses || ''}
                                />
                                {section.image2 && (
                                    <img
                                        src={section.image2}
                                        alt={section.imageAlt2}
                                        class={section.imageClasses || ''}
                                    />
                                )}
                            </div>
                            <div
                                class="skeleton__content--conditions"
                                set:html={section.condition}
                            />
                        </div>
                    </article>
                </div>
            ))
    }

    <div class={`skeleton__footer`}>
        <div class="skeleton__footer--dots">
            {
                //Footer dots based in the width of the array
                data
                    .filter((section) => section.type == type)
                    .map((section, index) => (
                        <div
                            class={`skeleton__footer--dot skeleton__footer--dot--${type} ${
                                section.active
                                    ? " skeleton__footer--dot--active"
                                    : ""
                            }`}
                        />
                    ))
            }
        </div>
    </div>
</section>

<script>
    //Vanilla js code
    const infantsSections = document.querySelectorAll(
        ".skeleton__content--mobile-infants"
    );
    const adultsSections = document.querySelectorAll(
        ".skeleton__content--mobile-adults"
    );

    const arrowLeftsInfants = document.querySelectorAll(
        ".skeleton__content--mobile-infants .skeleton__header--arrow-left"
    );

    const arrowRightsInfants = document.querySelectorAll(
        ".skeleton__content--mobile-infants .skeleton__header--arrow-right"
    );

    const arrowLeftsAdults = document.querySelectorAll(
        ".skeleton__content--mobile-adults .skeleton__header--arrow-left"
    );

    const arrowRightsAdults = document.querySelectorAll(
        ".skeleton__content--mobile-adults .skeleton__header--arrow-right"
    );

    const dotsInfants = document.querySelectorAll(
        ".skeleton__footer--dot--infants"
    );

    const dotsAdults = document.querySelectorAll(
        ".skeleton__footer--dot--adults"
    );

    arrowRightsInfants.forEach((arrowRight) => {
        arrowRight.addEventListener("click", () => {
            let foundActive = false;
            let indexNext = 0;

            infantsSections.forEach((section, index) => {
                if (section.classList.contains("skeleton__content--active")) {
                    section.classList.remove("skeleton__content--active");
                    indexNext = index + 1;
                    foundActive = true;
                }
            });

            if (!foundActive) {
                infantsSections[0].classList.add("skeleton__content--active"); // If no active element was found, set the first element as active
            } else if (indexNext < infantsSections.length) {
                infantsSections[indexNext].classList.add(
                    "skeleton__content--active"
                ); // If the active element was found and it's not the last element, set the next element as active

                //Add the active class to the dot
                dotsInfants.forEach((dot, index) => {
                    if (index == indexNext) {
                        dot.classList.add("skeleton__footer--dot--active");
                    } else {
                        dot.classList.remove("skeleton__footer--dot--active");
                    }
                });
            } else {
                infantsSections[0].classList.add("skeleton__content--active"); // If the active element was found and it's the last element, set the first element as active
                dotsInfants.forEach((dot, index) => {
                    if (index == 0) {
                        dot.classList.add("skeleton__footer--dot--active");
                    } else {
                        dot.classList.remove("skeleton__footer--dot--active");
                    }
                });
            }
        });
    });

    arrowLeftsInfants.forEach((arrowLeft) => {
        arrowLeft.addEventListener("click", () => {
            let foundActive = false;
            let indexPrev = 0;

            infantsSections.forEach((section, index) => {
                if (section.classList.contains("skeleton__content--active")) {
                    section.classList.remove("skeleton__content--active");
                    indexPrev = index - 1;
                    foundActive = true;
                }
            });

            if (!foundActive) {
                infantsSections[infantsSections.length - 1].classList.add(
                    "skeleton__content--active"
                ); // If no active element was found, set the last element as active
            } else if (indexPrev >= 0) {
                infantsSections[indexPrev].classList.add(
                    "skeleton__content--active"
                ); // If the active element was found and it's not the first element, set the previous element as active
                dotsInfants.forEach((dot, index) => {
                    if (index == indexPrev) {
                        dot.classList.add("skeleton__footer--dot--active");
                    } else {
                        dot.classList.remove("skeleton__footer--dot--active");
                    }
                });
            } else {
                infantsSections[infantsSections.length - 1].classList.add(
                    "skeleton__content--active"
                ); // If the active element was found and it's the first element, set the last element as active
                dotsInfants.forEach((dot, index) => {
                    if (index == infantsSections.length - 1) {
                        dot.classList.add("skeleton__footer--dot--active");
                    } else {
                        dot.classList.remove("skeleton__footer--dot--active");
                    }
                });
            }
        });
    });

    arrowRightsAdults.forEach((arrowRight) => {
        arrowRight.addEventListener("click", () => {
            let foundActive = false;
            let indexNext = 0;

            adultsSections.forEach((section, index) => {
                if (section.classList.contains("skeleton__content--active")) {
                    section.classList.remove("skeleton__content--active");
                    indexNext = index + 1;
                    foundActive = true;
                }
            });

            if (!foundActive) {
                adultsSections[0].classList.add("skeleton__content--active"); // If no active element was found, set the first element as active
            } else if (indexNext < adultsSections.length) {
                adultsSections[indexNext].classList.add(
                    "skeleton__content--active"
                ); // If the active element was found and it's not the last element, set the next element as active
                dotsAdults.forEach((dot, index) => {
                    if (index == indexNext) {
                        dot.classList.add("skeleton__footer--dot--active");
                    } else {
                        dot.classList.remove("skeleton__footer--dot--active");
                    }
                });
            } else {
                adultsSections[0].classList.add("skeleton__content--active"); // If the active element was found and it's the last element, set the first element as active
                dotsAdults.forEach((dot, index) => {
                    if (index == 0) {
                        dot.classList.add("skeleton__footer--dot--active");
                    } else {
                        dot.classList.remove("skeleton__footer--dot--active");
                    }
                });
            }
        });
    });

    arrowLeftsAdults.forEach((arrowLeft) => {
        arrowLeft.addEventListener("click", () => {
            let foundActive = false;
            let indexPrev = 0;

            adultsSections.forEach((section, index) => {
                if (section.classList.contains("skeleton__content--active")) {
                    section.classList.remove("skeleton__content--active");
                    indexPrev = index - 1;
                    foundActive = true;
                }
            });

            if (!foundActive) {
                adultsSections[adultsSections.length - 1].classList.add(
                    "skeleton__content--active"
                ); // If no active element was found, set the last element as active
            } else if (indexPrev >= 0) {
                adultsSections[indexPrev].classList.add(
                    "skeleton__content--active"
                ); // If the active element was found and it's not the first element, set the previous element as active
                dotsAdults.forEach((dot, index) => {
                    if (index == indexPrev) {
                        dot.classList.add("skeleton__footer--dot--active");
                    } else {
                        dot.classList.remove("skeleton__footer--dot--active");
                    }
                });
            } else {
                adultsSections[adultsSections.length - 1].classList.add(
                    "skeleton__content--active"
                ); // If the active element was found and it's the first element, set the last element as active
                dotsAdults.forEach((dot, index) => {
                    if (index == adultsSections.length - 1) {
                        dot.classList.add("skeleton__footer--dot--active");
                    } else {
                        dot.classList.remove("skeleton__footer--dot--active");
                    }
                });
            }
        });
    });

    dotsAdults.forEach((dot, index) => {
        dot.addEventListener("click", () => {
            adultsSections.forEach((section) => {
                section.classList.remove("skeleton__content--active");
            });

            adultsSections[index].classList.add("skeleton__content--active");

            dot.classList.add("skeleton__footer--dot--active");

            dotsAdults.forEach((dot) => {
                if (dot !== dotsAdults[index]) {
                    dot.classList.remove("skeleton__footer--dot--active");
                }
            });
        });
    });

    dotsInfants.forEach((dot, index) => {
        dot.addEventListener("click", () => {
            infantsSections.forEach((section) => {
                section.classList.remove("skeleton__content--active");
            });

            infantsSections[index].classList.add("skeleton__content--active");

            dot.classList.add("skeleton__footer--dot--active");

            dotsInfants.forEach((dot) => {
                if (dot !== dotsInfants[index]) {
                    dot.classList.remove("skeleton__footer--dot--active");
                }
            });
        });
    });
</script>
