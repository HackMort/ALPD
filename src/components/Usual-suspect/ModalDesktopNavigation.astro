---
type Props = {
  type?: string;
};

const { type } = Astro.props;
---

<ul class=`navigation__links ${type}`>
  <li class=`navigation__item prev ${type}`>
    <a class=`navigation__item_link prev ${type}`>&lsaquo; previous</a>
  </li>
  <li class=`navigation__item next ${type}`>
    <a class=`navigation__item_link next ${type}`>next &rsaquo;</a>
  </li>
</ul>

<!-- Navigation -->
<script>
  // vanilla document ready
  document.addEventListener("DOMContentLoaded", function (event) {
    // Navigation Functionality
    const modalArticlesAdults = document.querySelectorAll(
      ".modal__grids_article.adults"
    );
    const modalArticlesInfants = document.querySelectorAll(
      ".modal__grids_article.infants"
    );

    const currentActiveArticleAdults = document.querySelector(
      ".modal__grids_article.adults.is--active"
    );

    const currentActiveArticleInfants = document.querySelector(
      ".modal__grids_article.infants.is--active"
    );

    hidePrev(currentActiveArticleAdults, modalArticlesAdults, "adults");
    hidePrev(currentActiveArticleInfants, modalArticlesInfants, "infants");

    const navigationLinksAdults = document.querySelectorAll(
      ".adults.navigation__item_link"
    );

    const navigationLinksInfants = document.querySelectorAll(
      ".infants.navigation__item_link"
    );

    navigationHandle(navigationLinksAdults, modalArticlesAdults, "adults");
    navigationHandle(navigationLinksInfants, modalArticlesInfants, "infants");

    const modalCloseAdults = document.querySelector(
      "#usual-supect-modal--adults--desktop .usual-supect__modal_close-button"
    );
    const modalCloseInfants = document.querySelector(
      "#usual-supect-modal--infants--desktop .usual-supect__modal_close-button"
    );

    modalCloseAdults.addEventListener("click", (e) => {
      e.preventDefault();
      closingModal(modalArticlesAdults, "adults");
    });

    modalCloseInfants.addEventListener("click", (e) => {
      e.preventDefault();
      closingModal(modalArticlesInfants, "infants");
    });

    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        closingModal(modalArticlesAdults, "adults");
        closingModal(modalArticlesInfants, "infants");
      }
    });

    //TODO: Close the modal when clicking outside of it

    /* document.addEventListener("DOMSubtreeModified", function (event) {
      console.log("DOMSubtreeModified");
      const modalOverlay = document.querySelector(".fancybox__backdrop");
      console.log(modalOverlay);
      if (modalOverlay) {
        //Modal overlay has z-index of -1
        modalOverlay.addEventListener("click", (e) => {
          closingModal(modalArticlesAdults, "adults");
          closingModal(modalArticlesInfants, "infants");
        });
      }
    }); */
  });

  function hidePrev(current: any, modalArticles: any, type: string) {
    if (current === modalArticles[0]) {
      document
        .querySelector(`.${type} .navigation__item.prev`)
        .classList.add("hidden");
    } else if (current === modalArticles[modalArticles.length - 1]) {
      document
        .querySelector(`.${type} .navigation__item.next`)
        .classList.add("hidden");
    } else {
      document
        .querySelector(`.${type} .navigation__item.prev`)
        .classList.remove("hidden");
      document
        .querySelector(`.${type} .navigation__item.next`)
        .classList.remove("hidden");
    }
  }

  function navigationHandle(links: any, modalArticles: any, type: string) {
    links.forEach((link: any) => {
      link.addEventListener("click", (e: any) => {
        e.preventDefault();
        const currentActiveArticle = document.querySelector(
          `.${type}.modal__grids_article.is--active`
        );
        const currentActiveArticleIndex =
          Array.from(modalArticles).indexOf(currentActiveArticle);
        const nextArticleIndex = currentActiveArticleIndex + 1;
        const prevArticleIndex = currentActiveArticleIndex - 1;
        const nextArticle = modalArticles[nextArticleIndex];
        const prevArticle = modalArticles[prevArticleIndex];
        if (link.classList.contains("next")) {
          currentActiveArticle.classList.remove("is--active");
          nextArticle.classList.add("is--active");
          hidePrev(nextArticle, modalArticles, type);
        } else if (link.classList.contains("prev")) {
          currentActiveArticle.classList.remove("is--active");
          prevArticle.classList.add("is--active");
          hidePrev(prevArticle, modalArticles, type);
        }
      });
    });
  }

  function closingModal(modals: any, type) {
    console.log(modals);
    modals.forEach((modal: any) => {
      modal.classList.remove("is--active");
    });
    document
      .querySelector(`.${type} .navigation__item.prev`)
      .classList.add("hidden");
    document
      .querySelector(`.${type} .navigation__item.next`)
      .classList.remove("hidden");
    modals[0].classList.add("is--active");
  }
</script>
